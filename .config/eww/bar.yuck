
(defpoll mode
         :interval "100ms"
         `niri msg -j focused-window | jq --raw-output .title`
         )

(defwidget _ewwbar_mode []
           (label
            :class "ewwbar-mode borders"
            :limit-width 56
            :text "${mode}"
            )
           )

(defpoll ws_info :interval "10ms" :initial `eww-workspace` `eww-workspace`)
(defvar wss "[1,2,3,4,5,6,7,8,9]")

(defwidget workspace_switcher []
           (box
            :class "ewwbar-workspaces borders"
            :orientation "h"
            :hexpand false
            (for ws in wss
                 (button
                  :class "ewwbar-workspace ${ws == ws_info["cws"] ? "active-workspace" : ""}"
                  :onclick "hyprctl dispatch workspace ${ws}"
                   ;{ws == current_ws ? "" : ""}
                  ;{ws == current_ws ? "|" : "_"}
                  {ws == ws_info["cws"] ? "" : "_"}
                  )
                 )
            )
           )

(defpoll time :interval "5s"
  "date +'{\"hour\":\"%-H\",\"min\":\"%-M\",\"month\":\"%B\",\"year\":\"%Y\",\"day\":\"%A\" , \"date\":\"%-d\"}'")

(defwidget _ewwbar_time []
		(label :class "ewwbar-mode borders" :limit-width 64 :text " ${time.hour}\:${time.min}")
)


(defvar battery_percentage false)
(defpoll battery :interval "1s" :initial `eww-battery` `eww-battery`)
(defwidget _ewwbar_battery []
		(eventbox :class "ewwbar-battery" 
				:onhover "eww update battery_percentage=true"
				:onhoverlost "eww update battery_percentage=false"
				(box :space-evenly false :class "ewwbar-tw"
						(label :class "ewwbar-symbol"  :text {battery["symbol"]})
						(revealer :transition "slideright" :reveal battery_percentage
								(label :class "ewwbar-text" :valign "center" :text {battery["capacity"]} )
						)
				)
    )
)

(defvar wifi_ssid false)
(defpoll wifi :interval "1s" :initial `eww-wifi` `eww-wifi`)
(defwidget _ewwbar_wifi []
		(eventbox :class "ewwbar-wifi" 
				:onhover "eww update wifi_ssid=true"
				:onhoverlost "eww update wifi_ssid=false"
				(box :space-evenly false :class "ewwbar-tw"
						(label :class "ewwbar-symbol"  :text {wifi["symbol"]})
						(revealer :transition "slideright" :reveal wifi_ssid
								(label :class "ewwbar-text" :valign "center" :text {wifi["ssid"]} )
						)
				)
    )
)

(defvar bluetooth_name false)
(defpoll bluetooth :interval "100ms" :initial `eww-bluetooth` `eww-bluetooth`)
(defwidget _ewwbar_bluetooth []
		(eventbox :class "ewwbar-bluetooth" 
				:onhover "eww update bluetooth_name=true"
				:onhoverlost "eww update bluetooth_name=false"
				(box :space-evenly false :class "ewwbar-tw"
						(label :class "ewwbar-symbol"  :text {bluetooth["symbol"]})
						(revealer :transition "slideright" :reveal bluetooth_name
								(label :class "ewwbar-text" :valign "center" :text {bluetooth["name"]} )
						)
				)
    )
)




(defvar ewwbar_visible true)

(defwidget _bar []
  (eventbox :class "ewwbar-hover" 
    :onhover "eww update ewwbar_visible=true"
    :onhoverlost "eww update ewwbar_visible=true"
    (revealer :transition "sliderup" :reveal ewwbar_visible
      (box :orientation "horizontal"
        (box :orientation "horizontal" :halign "start" :space-evenly false :class "ewwbar-layout"
          (_ewwbar_time)
          (_ewwbar_mode)
          )
        (box :orientation "horizontal" :halign "center" :space-evenly false :class ""
          (workspace_switcher)
          )
        (box :orientation "horizontal" :halign "end" :space-evenly false :class "ewwbar-layout-right borders"
          (_ewwbar_bluetooth)
          (_ewwbar_wifi)
          (_ewwbar_battery)
          )
        )
      )
    )
  )

(defwindow bar 
  :monitor 0 
  :geometry (geometry :x "0%" :y "1%" :width "100%" :height "34px" :anchor "bottom center") 
  :stacking "fg" 
  :exclusive true
  :focusable false 
  :namespace "ewwbar"
  (_bar)
)
