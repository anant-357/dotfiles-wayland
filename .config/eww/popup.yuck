;(defvar volume_name false)
;(defwidget _ewwbar_volume []
;		(eventbox :class "ewwbar-volume" 
;				:onhover "eww update volume_name=true"
;				:onhoverlost "eww update volume_name=false"
;				(box :space-evenly false :class "ewwbar-tw"
;						(label :class "ewwbar-symbol"  :text {volume["symbol"]})
;						(revealer :transition "slideright" :reveal volume_name
;								(label :class "ewwbar-text" :valign "center" :text {volume["volume"]} )
;						)
;				)
;    )
;)

(defpoll volume :interval "100ms" :initial `eww-volume` `eww-volume`)
(defpoll brightness :interval "100ms" :initial `eww-brightness` `eww-brightness`)

(defwidget _popup [label value] 
(box :class "popup-box" :orientation "vertical" :space-evenly false
        (scale :class "bg-trial" :orientation "vertical" :flipped true :min 0 :max 120 :value value)
				(label :class  "popup-label" :text label)
				))

(defwindow volume 
  :monitor 0 
  :geometry (geometry :x "1%" :y "0%" :width "24px" :height "100px" :anchor "center right") 
  :stacking "fg" 
  :exclusive false
  :focusable false 
  :namespace "eww-volume"
  (_popup :label {volume["symbol"]} :value {volume["volume"]})
)


(defwindow brightness 
  :monitor 0 
  :geometry (geometry :x "2%" :y "0%" :width "24px" :height "100px" :anchor "center right") 
  :stacking "fg" 
  :exclusive false
  :focusable false 
  :namespace "eww-brightness"
  (_popup :label {brightness["symbol"]} :value {brightness["value"]})
)
